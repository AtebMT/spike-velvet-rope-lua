# load_module "modules/ndk_http_module.so";
# load_module "modules/ngx_http_lua_module.so";

# user  nginx;
# worker_processes  auto;

# error_log  /var/log/nginx/error.log notice;
# pid        /var/run/nginx.pid;


# events {
#     worker_connections  1024;
# }


# http {
#   include       /etc/nginx/mime.types;
#   default_type  application/octet-stream;

#   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" '
#                     '"$http_user_agent" "$http_x_forwarded_for"';

#   access_log  /var/log/nginx/access.log  main;

#   sendfile        on;
#   #tcp_nopush     on;

#   keepalive_timeout  65;

  error_log logs/error.log debug;

  lua_package_path "$prefix/conf/?.lua;/etc/nginx/conf.d/?.lua;;";

  lua_shared_dict velvetrope_uk 3m;
  lua_shared_dict velvetrope_us 3m;
  lua_shared_dict velvetrope_ie 3m;
  lua_shared_dict velvetrope_au 3m;
  lua_shared_dict velvetrope_metadata 12k;

  init_worker_by_lua_file '/etc/nginx/conf.d/syncVelvetRopeUsers.lua';

  server {
    server_name   localhost;
    listen        81;

    location ~ ^/velvet-rope/add-user-type/(?<userKey>[a-zA-Z0-9\-].+)/(?<typeOfUser>[\d]+)$ {
      content_by_lua_file '/etc/nginx/conf.d/add-user-type.lua';
    }

    location ~ ^/velvet-rope/get-user-type/(?<userKey>[a-zA-Z0-9\-].+)$ {
      content_by_lua_file '/etc/nginx/conf.d/get-user-type.lua';
    }

    location /metrics {
      content_by_lua_file '/etc/nginx/conf.d/velvetrope/metrics.lua';
    }

    location ~ ^/admin/(?<state>enable|disable)$ {
      content_by_lua_file '/etc/nginx/conf.d/velvetrope/killSwitch.lua';
    }

    location ~ ^/admin/capacity/(?<capacity>[0-9].*)$ {
      content_by_lua_file '/etc/nginx/conf.d/velvetrope/setCapacity.lua';
    }

    location /admin/get-user-type-free-space {
      content_by_lua_file '/etc/nginx/conf.d/get-user-type-free-space.lua';
    }

    location /test {
      default_type text/plain;
      return 200 'OK from proxy server';
    }
  }

  server {
      server_name   localhost;
      listen        80;

      error_page    500 502 503 504  /50x.html;

      access_by_lua_block {
        return require("velvetrope/bouncer").checkAccess()
      }
    
      location / {
          proxy_pass http://localhost:81;
      }
  }
# }